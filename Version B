pcall(function()
	getgenv().Aimbot.Functions:Exit()
end)

getgenv().Aimbot = {}
local Environment = getgenv().Aimbot

local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local Camera = game:GetService("Workspace").CurrentCamera

local LocalPlayer = game:GetService("Players").LocalPlayer
local Typing, Running, Animation, ServiceConnections = false, false, nil, {}

Environment.Settings = {
	Enabled = false,
	AliveCheck = true,
	WallCheck = false,
	Sensitivity = 0,
	TriggerKey = "MouseButton2",
	Toggle = false,
	LockPart = "Head"
}

Environment.FOVSettings = {
	Enabled = true,
	Visible = true,
	Amount = 90,
	Color = "255, 255, 255",
	LockedColor = "255, 70, 70",
	Transparency = 0.5,
	Sides = 60,
	Thickness = 1,
	Filled = false
}

Environment.FOVCircle = Drawing.new("Circle")
Environment.Locked = nil

local function GetColor(Color)
	local R = tonumber(string.match(Color, "([%d]+)[%s]*,[%s]*[%d]+[%s]*,[%s]*[%d]+"))
	local G = tonumber(string.match(Color, "[%d]+[%s]*,[%s]*([%d]+)[%s]*,[%s]*[%d]+"))
	local B = tonumber(string.match(Color, "[%d]+[%s]*,[%s]*[%d]+[%s]*,[%s]*([%d]+)"))
	return Color3.fromRGB(R, G, B)
end

local function GetClosestEnemy()
    if not Environment.Locked then
        local RequiredDistance = Environment.FOVSettings.Enabled and Environment.FOVSettings.Amount or 2000
        
        for _, v in pairs(workspace:GetChildren()) do
            if v.Name == "soldier_model" and v:IsA("Model") and not v:FindFirstChild("friendly_marker") then
                local targetPart = v:FindFirstChild(Environment.Settings.LockPart)
                local humanoid = v:FindFirstChildOfClass("Humanoid")
                
                if targetPart and humanoid then
                    if Environment.Settings.AliveCheck and humanoid.Health <= 0 then continue end
                    if Environment.Settings.WallCheck and #(Camera:GetPartsObscuringTarget({targetPart.Position}, v:GetDescendants())) > 0 then continue end
                    
                    local Vector, OnScreen = Camera:WorldToViewportPoint(targetPart.Position)
                    local Distance = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(Vector.X, Vector.Y)).Magnitude
                    
                    if Distance < RequiredDistance and OnScreen then
                        RequiredDistance = Distance
                        Environment.Locked = v
                    end
                end
            end
        end
    elseif Environment.Locked then
        if not Environment.Locked.Parent or Environment.Locked:FindFirstChild("friendly_marker") then
            Environment.Locked = nil
            if Animation then
                Animation:Cancel()
            end
            Environment.FOVCircle.Color = GetColor(Environment.FOVSettings.Color)
        end
    end
end

ServiceConnections.TypingStartedConnection = UserInputService.TextBoxFocused:Connect(function()
	Typing = true
end)

ServiceConnections.TypingEndedConnection = UserInputService.TextBoxFocusReleased:Connect(function()
	Typing = false
end)

local function Load()
	ServiceConnections.RenderSteppedConnection = RunService.RenderStepped:Connect(function()
		if Environment.FOVSettings.Enabled and Environment.Settings.Enabled then
			Environment.FOVCircle.Radius = Environment.FOVSettings.Amount
			Environment.FOVCircle.Thickness = Environment.FOVSettings.Thickness
			Environment.FOVCircle.Filled = Environment.FOVSettings.Filled
			Environment.FOVCircle.NumSides = Environment.FOVSettings.Sides
			Environment.FOVCircle.Color = GetColor(Environment.FOVSettings.Color)
			Environment.FOVCircle.Transparency = Environment.FOVSettings.Transparency
			Environment.FOVCircle.Visible = Environment.FOVSettings.Visible
			Environment.FOVCircle.Position = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
		else
			Environment.FOVCircle.Visible = false
		end
		
		if Running and Environment.Settings.Enabled then
			GetClosestEnemy()
			if Environment.Locked and Environment.Locked:FindFirstChild(Environment.Settings.LockPart) and not Environment.Locked:FindFirstChild("friendly_marker") then
				local targetPart = Environment.Locked:FindFirstChild(Environment.Settings.LockPart)
				
				if Environment.Settings.Sensitivity > 0 then
					Animation = TweenService:Create(Camera, TweenInfo.new(Environment.Settings.Sensitivity, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = CFrame.new(Camera.CFrame.Position, targetPart.Position)})
					Animation:Play()
				else
					Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetPart.Position)
				end
				Environment.FOVCircle.Color = GetColor(Environment.FOVSettings.LockedColor)
			end
		end
	end)

	ServiceConnections.InputBeganConnection = UserInputService.InputBegan:Connect(function(Input)
	    if not Typing then
	        pcall(function()
	            if Input.KeyCode == Enum.KeyCode[Environment.Settings.TriggerKey] then
	                if Environment.Settings.Toggle then
	                    Running = not Running
	                    if not Running then
	                        Environment.Locked = nil
	                        if Animation then
	                            Animation:Cancel()
	                        end
	                        Environment.FOVCircle.Color = GetColor(Environment.FOVSettings.Color)
	                    end
	                else
	                    Running = true
	                end
	            end
	        end)
	        pcall(function()
	            if Input.UserInputType == Enum.UserInputType[Environment.Settings.TriggerKey] then
	                if Environment.Settings.Toggle then
	                    Running = not Running
	                    if not Running then
	                        Environment.Locked = nil
	                        if Animation then
	                            Animation:Cancel()
	                        end
	                        Environment.FOVCircle.Color = GetColor(Environment.FOVSettings.Color)
	                    end
	                else
	                    Running = true
	                end
	            end
	        end)
	    end
	end)

	ServiceConnections.InputEndedConnection = UserInputService.InputEnded:Connect(function(Input)
		if not Typing then
			pcall(function()
				if Input.KeyCode == Enum.KeyCode[Environment.Settings.TriggerKey] then
					if not Environment.Settings.Toggle then
					    Running = false
					    Environment.Locked = nil
					    if Animation then
					        Animation:Cancel()
					    end
					    Environment.FOVCircle.Color = GetColor(Environment.FOVSettings.Color)
					end
				end
			end)
			pcall(function()
				if Input.UserInputType == Enum.UserInputType[Environment.Settings.TriggerKey] then
					if not Environment.Settings.Toggle then
					    Running = false
					    Environment.Locked = nil
					    if Animation then
					        Animation:Cancel()
					    end
					    Environment.FOVCircle.Color = GetColor(Environment.FOVSettings.Color)
					end
				end
			end)
		end
	end)
end

Environment.Functions = {}

function Environment.Functions:Exit()
	for _, v in next, ServiceConnections do
		v:Disconnect()
	end
	if Environment.FOVCircle.Remove then Environment.FOVCircle:Remove() end
	getgenv().Aimbot.Functions = nil
	getgenv().Aimbot = nil
end

function Environment.Functions:Restart()
	for _, v in next, ServiceConnections do
		v:Disconnect()
	end
	Load()
end

if not Drawing or not getgenv then
	print("Error")
end

Load()
